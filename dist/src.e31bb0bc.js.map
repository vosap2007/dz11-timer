{"version":3,"sources":["index.js"],"names":["Timer","onTick","setInterval","currentTime","Date","now","deltaTime","timer","targetDate","time","getTimeComponents","selector","updateClocface","start","pad","value","String","padStart","days","Math","floor","hours","mins","secs"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;IAEMA;AAEF,uBAAwB;AAAA,QAAVC,MAAU,QAAVA,MAAU;;AAAA;;AACpB,SAAKA,MAAL,GAAcA,MAAd;AACH;;;;4BAEO;AAAA;;AACJC,MAAAA,WAAW,CAAC,YAAM;AACd,YAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,EAApB;AACA,YAAMC,SAAS,GAAGC,KAAK,CAACC,UAAN,GAAmBL,WAArC;AACA,YAAMM,IAAI,GAAGC,iBAAiB,CAACJ,SAAD,CAA9B;;AAEA,QAAA,KAAI,CAACL,MAAL,CAAYQ,IAAZ;AACH,OANU,EAMR,IANQ,CAAX;AAOH;;;;;;AAGA,IAAMF,KAAK,GAAG,IAAIP,KAAJ,CAAU;AACvBW,EAAAA,QAAQ,EAAE,UADa;AAEvBH,EAAAA,UAAU,EAAE,IAAIJ,IAAJ,CAAS,cAAT,CAFW;AAGvBH,EAAAA,MAAM,EAAEW;AAHe,CAAV,CAAd;AAMLL,KAAK,CAACM,KAAN;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAChB,SAAOC,MAAM,CAACD,KAAD,CAAN,CAAcE,QAAd,CAAuB,CAAvB,EAA0B,GAA1B,CAAP;AACH;;AAED,SAASP,iBAAT,CAA2BD,IAA3B,EAAiC;AAC7B,MAAMS,IAAI,GAAGJ,GAAG,CAACK,IAAI,CAACC,KAAL,CAAWX,IAAI,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAf,CAAD,CAAhB;AACA,MAAMY,KAAK,GAAGP,GAAG,CAACK,IAAI,CAACC,KAAL,CAAYX,IAAI,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAL,IAAkC,OAAO,EAAP,GAAY,EAA9C,CAAX,CAAD,CAAjB;AACA,MAAMa,IAAI,GAAGR,GAAG,CAACK,IAAI,CAACC,KAAL,CAAYX,IAAI,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAL,IAA6B,OAAO,EAApC,CAAX,CAAD,CAAhB;AACA,MAAMc,IAAI,GAAGT,GAAG,CAACK,IAAI,CAACC,KAAL,CAAYX,IAAI,IAAI,OAAO,EAAX,CAAL,GAAuB,IAAlC,CAAD,CAAhB;AAEA,SAAO;AAACS,IAAAA,IAAI,EAAJA,IAAD;AAAOG,IAAAA,KAAK,EAALA,KAAP;AAAcC,IAAAA,IAAI,EAAJA,IAAd;AAAoBC,IAAAA,IAAI,EAAJA;AAApB,GAAP;AACH;;AAED,SAASX,cAAT,QAAqD;AAAA,MAA3BM,IAA2B,SAA3BA,IAA2B;AAAA,MAArBG,KAAqB,SAArBA,KAAqB;AAAA,MAAdC,IAAc,SAAdA,IAAc;AAAA,MAARC,IAAQ,SAARA,IAAQ;AACnDhB,EAAAA,KAAK,CAACI,QAAN,CAAgB,UAAhB,cAAkCO,IAAlC,cAA0CG,KAA1C,cAAmDC,IAAnD,cAA2DC,IAA3D;AACD","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["/*const CountdownTimer = ({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Nov 17, 2021'),\r\n});*/\r\n\r\n/*new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jul 17, 2019'),\r\n});*/\r\n\r\nclass Timer {\r\n\r\n    constructor({ onTick }) {\r\n        this.onTick = onTick;\r\n    }\r\n\r\n    start() {\r\n        setInterval(() => {   \r\n            const currentTime = Date.now();\r\n            const deltaTime = timer.targetDate - currentTime;\r\n            const time = getTimeComponents(deltaTime); \r\n          \r\n            this.onTick(time)\r\n        }, 1000);\r\n    }\r\n}\r\n\r\n     const timer = new Timer({\r\n      selector: '#timer-1',\r\n      targetDate: new Date('Jul 17, 2019'),\r\n      onTick: updateClocface\r\n     });\r\n\r\ntimer.start();\r\n\r\nfunction pad(value) {\r\n    return String(value).padStart(2, '0');\r\n}\r\n\r\nfunction getTimeComponents(time) { \r\n    const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return {days, hours, mins, secs};\r\n}\r\n\r\nfunction updateClocface({ days, hours, mins, secs }) {\r\n  timer.selector.['#timer-1']  = `${days}:${hours}:${mins}:${secs}`;\r\n}\r\n\r\n"]}